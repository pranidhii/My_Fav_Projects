names(dd)[5] <- "loss"
loss<- 0
while (i <3 || j <3 ) {
x1 <-round(runif(1, min = -50, max = +50))
x2<-round(runif(1,min = -50, max = 50))
X<-matrix(c(x1,x2))
beta <- matrix(c(0.25, 0.75))
Z = t(X)%*%beta
flog <- 1/(1+exp(-Z))
Y<-round(flog)
if(Y ==1){
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
i = i+1}
else{
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
j = j+1}
m = m+1
}
print(dd)
#building loss function
omega1 <- 1
omega2 <- 2
b<- 3
a<- 1.25
c<- 4
omega <- c(omega1, omega2)
print(t(omega))
k <-1
while (k < m) {
X<- c(dd[k,1],dd[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
dd[k,4] = f3
h = dd[k,4] * log(dd[k,4] - dd[k,3])
dd[k,5] = h
loss = -(loss + h)
k = k+1
}
print(dd)
print(loss)
i <- 0
j <- 0
m <- 1
dd<-data.frame(matrix(ncol=5))
names(dd)[1] <- "x1"
names(dd)[2] <- "x2"
names(dd)[3] <- "Y"
names(dd)[4] <- "H"
names(dd)[5] <- "loss"
loss<- 0
while (i <3 || j <3 ) {
x1 <-round(runif(1, min = -50, max = +50))
x2<-round(runif(1,min = -50, max = 50))
X<-matrix(c(x1,x2))
beta <- matrix(c(0.25, 0.75))
Z = t(X)%*%beta
flog <- 1/(1+exp(-Z))
Y<-round(flog)
if(Y ==1){
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
i = i+1}
else{
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
j = j+1}
m = m+1
}
print(dd)
# Part B
#building loss function
omega1 <- 1
omega2 <- 2
b<- 3
a<- 1.25
c<- 4
omega <- c(omega1, omega2)
k <-1
while (k < m) {
X<- c(dd[k,1],dd[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
dd[k,4] = f3
h = dd[k,4] * log(dd[k,4] - dd[k,3])
dd[k,5] = h
loss = -(loss + h)
k = k+1
}
print(dd)
# Part C
# shown above & loss function calculated above:
#omega1 <- 1
#omega2 <- 2
#b<- 3
#a<- 1.25
#c<- 4
#omega <- c(omega1, omega2)
print(loss)
#Part D
# back propagation
final <- dd
print(final)
# Part A
# generating 6 observations
i <- 0
j <- 0
m <- 1
dd<-data.frame(matrix(ncol=5))
names(dd)[1] <- "x1"
names(dd)[2] <- "x2"
names(dd)[3] <- "Y"
names(dd)[4] <- "H"
names(dd)[5] <- "loss"
loss<- 0
while (i <3 || j <3 ) {
x1 <-round(runif(1, min = -50, max = +50))
x2<-round(runif(1,min = -50, max = 50))
X<-matrix(c(x1,x2))
beta <- matrix(c(0.25, 0.75))
Z = t(X)%*%beta
flog <- 1/(1+exp(-Z))
Y<-round(flog)
if(Y ==1){
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
i = i+1}
else{
dd[m,1] <- x1
dd[m,2] <- x2
dd[m,3] <- Y
j = j+1}
m = m+1
}
print(dd)
# Part B
#building loss function
omega1 <- 0.5
omega2 <- 2.7
b<- 4.3
a<- 2.25
c<- 5
omega <- c(omega1, omega2)
k <-1
while (k < m) {
X<- c(dd[k,1],dd[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
dd[k,4] = f3
h = dd[k,4] * log(dd[k,4] - dd[k,3])
dd[k,5] = h
loss = -(loss + h)
k = k+1
}
print(dd)
print(loss)
# Initial guess
IG <- c(a,omega1,omega2,b,c)
final_nimmi = dd
final_nimmi
diffa_total = diffa_total + diff_a
k <-1
diffa_total = 0
diffomega1_total = 0
diffomega2_total = 0
diffb_total = 0
diffc_total = 0
names(final)[6] <- "diff_a"
names(final)[7] <- "diff_omega1"
names(final)[8] <- "diff_omega2"
names(final)[9] <- "diff_b"
names(final)[10] <- "diff_c"
while (k < m) {
X<- c(final[k,1],final[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
#dd[k,4] = f3
#h = dd[k,4] * log(dd[k,4] - dd[k,3])
#dd[k,5] = h
#loss = -(loss + h)
if(f1>=0){
diff_a = f1
diff_omega1 = -a *dd[k,1]
diff_omega2 = -a *dd[k,2]
diff_b = -a
diff_c = 1 }
else {
diff_a = 0
diff_omega1 = a *dd[k,1]
diff_omega2 = a *dd[k,2]
diff_b = a
diff_c = 1
}
final[k,6] = diff_a
final[k,7] = diff_omega1
final[k,8] = diff_omega2
final[k,9] = diff_b
final[k,10] = diff_c
diffa_total = diffa_total + diff_a
diffomega1_total = diffomega1_total + iff_omega1
diffomega2_total = diffomega2_total + iff_omega2
diffb_total = diffb_total + diff_b
diffc_total = diffc_total + diff_c
k=k+1
}
print(final)
k <-1
diffa_total = 0
diffomega1_total = 0
diffomega2_total = 0
diffb_total = 0
diffc_total = 0
names(final)[6] <- "diff_a"
names(final)[7] <- "diff_omega1"
names(final)[8] <- "diff_omega2"
names(final)[9] <- "diff_b"
names(final)[10] <- "diff_c"
while (k < m) {
X<- c(final[k,1],final[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
#dd[k,4] = f3
#h = dd[k,4] * log(dd[k,4] - dd[k,3])
#dd[k,5] = h
#loss = -(loss + h)
if(f1>=0){
diff_a = f1
diff_omega1 = -a *dd[k,1]
diff_omega2 = -a *dd[k,2]
diff_b = -a
diff_c = 1 }
else {
diff_a = 0
diff_omega1 = a *dd[k,1]
diff_omega2 = a *dd[k,2]
diff_b = a
diff_c = 1
}
final[k,6] = diff_a
final[k,7] = diff_omega1
final[k,8] = diff_omega2
final[k,9] = diff_b
final[k,10] = diff_c
diffa_total = diffa_total + diff_a
diffomega1_total = diffomega1_total + diff_omega1
diffomega2_total = diffomega2_total + diff_omega2
diffb_total = diffb_total + diff_b
diffc_total = diffc_total + diff_c
k=k+1
}
print(final)
IG_diff <- c(diffa_total,diffomega1_total,diffomega2_total,diffb_total,diffc_total)
gamma = 0.2
IG_new <- IG + gamma * IG_diff
IG_new
k <-1
diffa_total = 0
diffomega1_total = 0
diffomega2_total = 0
diffb_total = 0
diffc_total = 0
names(final_nimmi)[6] <- "diff_a"
names(final_nimmi)[7] <- "diff_omega1"
names(final_nimmi)[8] <- "diff_omega2"
names(final_nimmi)[9] <- "diff_b"
names(final_nimmi)[10] <- "diff_c"
while (k < m) {
X<- c(final_nimmi[k,1],final_nimmi[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
#dd[k,4] = f3
#h = dd[k,4] * log(dd[k,4] - dd[k,3])
#dd[k,5] = h
#loss = -(loss + h)
if(f1>=0){
diff_a = f1
diff_omega1 = -a *dd[k,1]
diff_omega2 = -a *dd[k,2]
diff_b = -a
diff_c = 1 }
else {
diff_a = 0
diff_omega1 = a *dd[k,1]
diff_omega2 = a *dd[k,2]
diff_b = a
diff_c = 1
}
final_nimmi[k,6] = diff_a
final_nimmi[k,7] = diff_omega1
final_nimmi[k,8] = diff_omega2
final_nimmi[k,9] = diff_b
final_nimmi[k,10] = diff_c
diffa_total = diffa_total + diff_a
diffomega1_total = diffomega1_total + diff_omega1
diffomega2_total = diffomega2_total + diff_omega2
diffb_total = diffb_total + diff_b
diffc_total = diffc_total + diff_c
k=k+1
}
print(final_nimmi)
# Part C
# shown above & loss function calculated above:
#omega1 <- 1
#omega2 <- 2
#b<- 3
#a<- 1.25
#c<- 4
#omega <- c(omega1, omega2)
print(loss)
#Part D
# back propagation
final_nimmi <- dd
print(final_nimmi)
# Initial guess
IG <- c(a,omega1,omega2,b,c)
IG_diff <- c(diffa_total,diffomega1_total,diffomega2_total,diffb_total,diffc_total)
gamma = 0.2
IG_new <- IG + gamma * IG_diff
IG_new
omega1 <- 0.5
omega2 <- 2.7
b<- 4.3
a<- 2.25
c<- 5
k <-1
diffa_total = 0
diffomega1_total = 0
diffomega2_total = 0
diffb_total = 0
diffc_total = 0
names(final_nimmi)[6] <- "diff_a"
names(final_nimmi)[7] <- "diff_omega1"
names(final_nimmi)[8] <- "diff_omega2"
names(final_nimmi)[9] <- "diff_b"
names(final_nimmi)[10] <- "diff_c"
while (k < m) {
X<- c(final_nimmi[k,1],final_nimmi[k,2])
f1 <- t(omega)%*%X + b
f2 <- max(0,f1)
f3 <- a*f2 + c
#dd[k,4] = f3
#h = dd[k,4] * log(dd[k,4] - dd[k,3])
#dd[k,5] = h
#loss = -(loss + h)
if(f1>=0){
diff_a = f1
diff_omega1 = -a *dd[k,1]
diff_omega2 = -a *dd[k,2]
diff_b = -a
diff_c = 1 }
else {
diff_a = 0
diff_omega1 = a *dd[k,1]
diff_omega2 = a *dd[k,2]
diff_b = a
diff_c = 1
}
final_nimmi[k,6] = diff_a
final_nimmi[k,7] = diff_omega1
final_nimmi[k,8] = diff_omega2
final_nimmi[k,9] = diff_b
final_nimmi[k,10] = diff_c
diffa_total = diffa_total + diff_a
diffomega1_total = diffomega1_total + diff_omega1
diffomega2_total = diffomega2_total + diff_omega2
diffb_total = diffb_total + diff_b
diffc_total = diffc_total + diff_c
k=k+1
}
print(final_nimmi)
# Part C
# shown above & loss function calculated above:
#omega1 <- 1
#omega2 <- 2
#b<- 3
#a<- 1.25
#c<- 4
#omega <- c(omega1, omega2)
print(loss)
#Part D
# back propagation
final_nimmi <- dd
print(final_nimmi)
# Initial guess
IG <- c(a,omega1,omega2,b,c)
IG_diff <- c(diffa_total,diffomega1_total,diffomega2_total,diffb_total,diffc_total)
gamma = 2
IG_new <- IG + gamma * IG_diff
IG_new
# Run the function
x1 <- -1
x2 <- -1
x3 <- 1
y <- (x2^2 + 3*x1*x2^2 -5x1+ 4x3^2)^3 - 5*x2*x3^2
y <- (x2^2 + 3*x1*x2^2 -5*x1+ 4*x3^2)^3 - 5*x2*x3^2
dyx1 <- 3*(x2^2 + 3*x1*x2^2 +-5x1+ 4x3^2)^2(*3*x2^2-5)
*
dyx1 <- 3*(x2^2 + 3*x1*x2^2 +-5*x1+ 4*x3^2)^2*(3*x2^2-5)
dyx2 <- 3*(x2^2 + 3*x1*x2^2 +-5*x1+ 4*x3^2)^2 * (2*x2 + 6*x1*x2) - 5*x3^2
dyx3 <- 3*(x2^2 + 3*x1*x2^2 +-5*x1+ 4*x3^2)^2 * 8*x3 -10*x2*x3
rm(list = ls())
delta <- function(x1,x2,x3,alpha){
dyx1 <- (alpha* ((3*(((x2^2)+(3*x1*(x2^2))-(5*x1)+4*(x3^2))^2)*3*(x2^2))-5))
dyx2 <- (alpha*((3*(((x2^2)+(3*x1*(x2^2))-(5*x1)+4*(x3^2))^2)*((2*x2)+(6*x1*x2)))-(5*(x3^2))))
dyx3 <- (alpha*((3*(((x2^2)+(3*x1*(x2^2))-(5*x1)+4*(x3^2))^2)*(8*x3))-(10*x2*x3)))
return(c(dyx1,dyx2,dyx3))
}
gradient <- function (x1, x2, x3, alpha)
{
for(i in 1:1500)
{
delta_value <- delta(x1,x2,x3,alpha)
x1 <- x1 - delta_value[1]
x2 <- x2 - delta_value[2]
x3 <- x3 - delta_value[3]
}
return(c(x1,x2,x3))
}
#a
print(gradient(-1, -1, 1, 0.0002))
#b
print(gradient(0, 0, -1, 0.001))
library(survival) # for survival analysis
library(survminer) # Drawing Survival Curves using 'ggplot2'
library(lubridate) # for data manipulation
setwd("/Users/pranidhiprabhat/Desktop/MSA/Spring/PA/Final\ Project")
library(readxl)
# Data includes both recovery and death cases with death marked as 120 ( infinity)
df = read_excel("death_imputed_DeathAndRecovery.xlsx")
colnames(df)
head(df)
df$Recovery_Time[1:10]
df$RecoveryStatus[1:10]
data = Surv(df$Recovery_Time, df$RecoveryStatus)
data[133:154]
## KM plot for one group
plot(survfit(data ~ 1),xlab = "Days",ylab = "Overall recovery probability")
out = survfit(data ~ 1)
out$time
out$n.event
out$n.censor
out$n.risk
KMdata = cbind(out$time,out$n.event,out$n.censor,out$n.risk)
colnames(KMdata) = c("time","n.event","n.censor","n.risk")
View(KMdata) #Imp-Read the table
dim(df)
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall survival probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$age),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
# Data includes both recovery and death cases with death marked as 120 ( infinity)
df = read_excel("death_imputed_DeathAndRecovery.xlsx")
colnames(df)
head(df)
df$Recovery_Time[1:10]
df$RecoveryStatus[1:10]
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
df = df[df$agebin!=0]
df = df[df$agebin!=0,]
df$Recovery_Time[1:10]
df$RecoveryStatus[1:10]
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
df = df[df$agebin!=0,]
# Data includes both recovery and death cases with death marked as 120 ( infinity)
df = read_excel("death_imputed_DeathAndRecovery.xlsx")
colnames(df)
head(df)
df = df[df$agebin!=0,]
df$Recovery_Time[1:10]
df$RecoveryStatus[1:10]
data = Surv(df$Recovery_Time, df$RecoveryStatus)
data[133:154]
## KM plot for one group
plot(survfit(data ~ 1),xlab = "Days",ylab = "Overall recovery probability")
out = survfit(data ~ 1)
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
datadeath = surv(df$Survival_Time,df$SurvivalStatus)
datadeath = surv(df$Survival_Time,df$SurvivalStatus)
datadeath = Surv(df$Survival_Time,df$SurvivalStatus)
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
plot(survfit(datadeath ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(datadeath ~ df$agebin),data = df)
plot(survfit(datadeath ~ df$agebin),xlab = "Days",ylab = "Overall Survival probability") #- survival curve calculation
ggsurvplot(survfit(datadeath ~ df$agebin),data = df)
## KM plot for two groups -i.e include some explanatory variables
plot(survfit(data ~ df$agebin),xlab = "Days",ylab = "Overall recovery probability") #- survival curve calculation
ggsurvplot(survfit(data ~ df$agebin),data = df)
plot(survfit(datadeath ~ df$agebin),xlab = "Days",ylab = "Overall Survival probability") #- survival curve calculation
ggsurvplot(survfit(datadeath ~ df$agebin),data = df)
